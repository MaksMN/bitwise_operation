#include <string>

// Вспоминаем из ранних курсов побитовой математики про степень двойки. Для этого она тут и нужна.
// Вспомнили? Можете смело забывать.

// Пример
// Наш пользователь может одновременно обладать множеством состояний.
// Может быть мужчиной, женщиной.
// Обладать подпиской премиум голд платинум итп

// задаем список перечислителя в котором элементы являются значением степени двойки

enum Statuses
{
    admin = 1,
    user = 2,
    man = 4,
    woman = 8,
    free_ = 16,
    premium = 32,
    gold = 64,
    platinum = 128,
    banned = 256
};
// Любые числа являющиеся значением степени двойки называют флагами

struct User
{
public:
    // все статусы можно хранить в одной переменной
    Statuses status = (Statuses)(user | man | free_); // по умолчанию пользователь, мужчина с бесплатной подпиской.
    int id;
};

int main()
{
    User u1;
    u1.status = (Statuses)(admin | man); // Этот пользователь у нас будет админ мужчина

    User u2;
    u2.status = (Statuses)(admin | woman); // это админ женщина

    User u3;
    u3.status = (Statuses)(user | man | premium); // это пользователь купил стандартную премиум подписку

    User u4;
    u4.status = (Statuses)(user | woman | platinum); // эта женщина раскошелилась на высшую платинум-подписку.

    // Через какое-то время пользователь u3 начал материться в общем чате.
    u3.status = (Statuses)(user | man | free_ | banned); // Мы его за это лишили подписки и забанили.

    // Статусы можно не только суммировать но и вычитать
    // Если пользователь меняет подписку, то нужно старую удалять иначе ему запишется 2 подписки сразу
    User u5;
    u5.status = (Statuses)(user | woman | premium);
    // Например пользователь решил повысить статус с премиум на голд.
    // Если мы просто прибавим подписку, то у него будет сразу две подписки, но по стандарту хранить можно только одну.
    // флаг можно вычитать даже если его нет в сумме, в этом случае просто ничего не произойдет.
    u5.status = (Statuses)((u5.status & ~(free_ | premium | gold)) | gold); // здесь мы из основного статуса вычли все существующие подписки и добавили голд.

    // так же можно сменить админа на обычного пользователя
    u1.status = (Statuses)((u1.status & ~admin) | user); // вычли админа, прибавили пользователя

    // | это можно рассматривать как знак сложения флагов
    // & ~ это вычитание флагов
    // Все операции выше называются - сумма флагов.

    bool compare;
    // Суммы флагов можно сравнивать

    // зададим одинаковые статусы
    u1.status = (Statuses)(user | man | premium);
    u2.status = (Statuses)(user | man | premium);
    compare = u1.status == u2.status; // true

    // зададим различные статусы
    u1.status = (Statuses)(user | man | premium);
    u2.status = (Statuses)(admin | man | premium);
    compare = u1.status == u2.status; // false

    // Как определить присутствует ли только один флаг в статусе пользователя?
    // Когда например нам нужно узнать является ли пользователь админом не зависимо от состояния других флагов.
    compare = u1.status & admin; // false
    compare = u2.status & admin; // true

    // забанен ли пользователь?
    compare = u3.status & banned; // true

    // А найдите мне забаненного из группы user
    compare = u3.status & (banned | user);

    // А есть ли у нас забаненный free_?
    compare = u3.status & (banned | free_);

    // Побитовое (И) & в данной операции играет роль оператора сравнения.

    /*
    Итог.
    Если названиям статусов присвоить числа которые являются степенями двойки
    admin = 2^0
    user = 2^1
    man = 2^2
    ... 2^n
    Побитовое (или) | их складывает
    Побитовое (и не) & ~ вычитает
    Побитовое и & сравнивает

    Сложение и вычитание производится безопасно. Это значит если флаг уже есть в сумме, то ничего не произойдет
    Или наоборот если флага нет в сумме, то ничего не произойдет при его вычитании.

    Суммы флагов это довольно мощный инструмент для хранения и управления множественным состоянием объекта.
    Позволяет делать множественные выборки одним аргументом.

    Перечислители можно не использовать. Но тогда вам придется пользоваться обычными числами. И каждый раз вспоминать что означает число 256 или 16.
    Проще оперировать ключевыми словами admin banned итп, которые объявляются в глобальной области и доступны в любом месте кода везде где инклюдятся.
    */
    return 0;
}